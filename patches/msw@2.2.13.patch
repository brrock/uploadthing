diff --git a/lib/core/handlers/RequestHandler.mjs b/lib/core/handlers/RequestHandler.mjs
index 3c26a001bd980be7505d6fcbbbaf325750869330..a9d28c952a1a450b657cab1f73700da929fe1905 100644
--- a/lib/core/handlers/RequestHandler.mjs
+++ b/lib/core/handlers/RequestHandler.mjs
@@ -116,27 +116,26 @@ class RequestHandler {
   }
   wrapResolver(resolver) {
     return async (info) => {
-      const result = this.resolverGenerator || await resolver(info);
+      const result = this.resolverGenerator || (await resolver(info));
       if (isIterable(result)) {
         this.isUsed = false;
-        const { value, done } = result[Symbol.iterator]().next();
-        const nextResponse = await value;
-        if (done) {
-          this.isUsed = true;
-        }
-        if (!nextResponse && done) {
-          invariant(
-            this.resolverGeneratorResult,
-            "Failed to returned a previously stored generator response: the value is not a valid Response."
-          );
-          return this.resolverGeneratorResult.clone();
-        }
+
         if (!this.resolverGenerator) {
           this.resolverGenerator = result;
         }
+
+        const { value, done } = await this.resolverGenerator.next()
+        const nextResponse = await value;
+
         if (nextResponse) {
-          this.resolverGeneratorResult = nextResponse?.clone();
+          this.resolverGeneratorResult = nextResponse.clone();
+        }
+
+        if (done) {
+          this.isUsed = true;
+          return this.resolverGeneratorResult?.clone();
         }
+        
         return nextResponse;
       }
       return result;
diff --git a/lib/core/utils/internal/isIterable.mjs b/lib/core/utils/internal/isIterable.mjs
index 4e9d6f92080acad602105f50ef10b4cbfb748861..962b60dd9544299b088c011ca14c9f9565e92639 100644
--- a/lib/core/utils/internal/isIterable.mjs
+++ b/lib/core/utils/internal/isIterable.mjs
@@ -2,7 +2,7 @@ function isIterable(fn) {
   if (!fn) {
     return false;
   }
-  return typeof fn[Symbol.iterator] == "function";
+  return Reflect.has(fn, Symbol.iterator) || Reflect.has(fn, Symbol.asyncIterator);
 }
 export {
   isIterable
