diff --git a/node_modules/msw/lib/core/handlers/RequestHandler.mjs b/node_modules/msw/lib/core/handlers/RequestHandler.mjs
index 3c26a00..048dbce 100644
--- a/node_modules/msw/lib/core/handlers/RequestHandler.mjs
+++ b/node_modules/msw/lib/core/handlers/RequestHandler.mjs
@@ -116,30 +116,31 @@ class RequestHandler {
   }
   wrapResolver(resolver) {
     return async (info) => {
-      const result = this.resolverGenerator || await resolver(info);
+      const result = this.resolverGenerator || (await resolver(info))
+
       if (isIterable(result)) {
-        this.isUsed = false;
-        const { value, done } = result[Symbol.iterator]().next();
-        const nextResponse = await value;
-        if (done) {
-          this.isUsed = true;
-        }
-        if (!nextResponse && done) {
-          invariant(
-            this.resolverGeneratorResult,
-            "Failed to returned a previously stored generator response: the value is not a valid Response."
-          );
-          return this.resolverGeneratorResult.clone();
-        }
+        this.isUsed = false
+
         if (!this.resolverGenerator) {
-          this.resolverGenerator = result;
+          this.resolverGenerator = result
         }
+
+        const { done, value } = await this.resolverGenerator.next()
+        const nextResponse = await value
+
         if (nextResponse) {
-          this.resolverGeneratorResult = nextResponse?.clone();
+          this.resolverGeneratorResult = nextResponse.clone()
+        }
+
+        if (done) {
+          this.isUsed = true
+          return this.resolverGeneratorResult?.clone()
         }
-        return nextResponse;
+
+        return nextResponse
       }
-      return result;
+
+      return result
     };
   }
   createExecutionResult(args) {
diff --git a/node_modules/msw/lib/core/utils/internal/isIterable.mjs b/node_modules/msw/lib/core/utils/internal/isIterable.mjs
index 4e9d6f9..962b60d 100644
--- a/node_modules/msw/lib/core/utils/internal/isIterable.mjs
+++ b/node_modules/msw/lib/core/utils/internal/isIterable.mjs
@@ -2,7 +2,7 @@ function isIterable(fn) {
   if (!fn) {
     return false;
   }
-  return typeof fn[Symbol.iterator] == "function";
+  return Reflect.has(fn, Symbol.iterator) || Reflect.has(fn, Symbol.asyncIterator);
 }
 export {
   isIterable
