diff --git a/dist/index.js b/dist/index.js
index 4cadc4dd7e95da967da5b897ba8d20dae25bf7c1..2c742f6da291d5f66aed0033ff5dc1ea2a6f12d4 100644
--- a/dist/index.js
+++ b/dist/index.js
@@ -1068,9 +1068,9 @@ async function writeDefaultTsconfig(tsConfigPath) {
 /**
  * @return {Record<string, string>} env { 'process.env.<key>': '<value>' }
  */ function getDefinedInlineVariables(envs, parsedExportCondition) {
-    if (!envs.includes('NODE_ENV')) {
-        envs.push('NODE_ENV');
-    }
+    // if (!envs.includes('NODE_ENV')) {
+    //     envs.push('NODE_ENV');
+    // }
     const envVars = envs.reduce((acc, key)=>{
         const value = process.env[key];
         if (typeof value !== 'undefined') {
@@ -1087,11 +1087,11 @@ async function writeDefaultTsconfig(tsConfigPath) {
         return acc;
     }, new Set());
     // For development and production convention, we override the NODE_ENV value
-    if (exportConditionNames.has('development')) {
-        envVars['process.env.NODE_ENV'] = JSON.stringify('development');
-    } else if (exportConditionNames.has('production')) {
-        envVars['process.env.NODE_ENV'] = JSON.stringify('production');
-    }
+    // if (exportConditionNames.has('development')) {
+    //     envVars['process.env.NODE_ENV'] = JSON.stringify('development');
+    // } else if (exportConditionNames.has('production')) {
+    //     envVars['process.env.NODE_ENV'] = JSON.stringify('production');
+    // }
     if (exportConditionNames.has('edge-light')) {
         envVars['EdgeRuntime'] = JSON.stringify('edge-runtime');
     }
